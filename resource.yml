apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-deploy
spec:
  selector:
    matchLabels:
      app: db-deploy
  template:
    metadata:
      labels:
        app: db-deploy
    spec:
      containers:
      - name: db-deploy
        image: postgres:latest
        resources:
          limits:
            memory: "256Mi"
            cpu: "500m"
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: student
        - name: POSTGRES_USER
          value: ${DB_USERNAME}
        - name: POSTGRES_PASSWORD
          value: ${DB_PASSWORD}
---
kind: Service
apiVersion: v1
metadata:
  name: db
spec:
  selector:
    app: db-deploy
  ports:
  - port: 5432
    targetPort: 5432
---
apiVersion: v1
kind: Service
metadata:
  name: cache
spec:
  selector:
    app: cache-deploy
  ports:
  - port: 6379
    targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cache-deploy
spec:
  selector:
    matchLabels:
      app: cache-deploy
  template:
    metadata:
      labels:
        app: cache-deploy
    spec:
      containers:
      - name: cache-deploy
        image: redis:latest
        resources:
          limits:
            memory: "128Mi"
            cpu: "250m"
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: zookeeper-service
  name: zookeeper-service
spec:
  # type: NodePort
  ports:
    - name: zookeeper-port
      port: 2181
      # nodePort: 30181
      targetPort: 2181
  selector:
    app: zookeeper
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: zookeeper
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - image: wurstmeister/zookeeper
          imagePullPolicy: IfNotPresent
          name: zookeeper
          ports:
          - containerPort: 2181
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka1-deploy
  name: kafka1
spec:
  ports:
  - port: 29092
  selector:
    app: kafka1-deploy
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kafka1-deploy
  name: kafka1-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka1-deploy
  template:
    metadata:
      labels:
        app: kafka1-deploy
    spec:
      hostname: kafka1-deploy
      containers:
      - env:
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: zookeeper-service:2181
        - name: KAFKA_LISTENERS
          value: INTERNAL://:29092
        - name: KAFKA_ADVERTISED_LISTENERS
          value: INTERNAL://kafka1:29092
        - name: KAFKA_CREATE_TOPICS
          value: kafka.postgres-modify:2:2,kafka.cache-wt:2:2
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: INTERNAL:PLAINTEXT
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: INTERNAL
        - name: ALLOW_PLAINTEXT_LISTENER
          value: 'yes'
        image: wurstmeister/kafka
        imagePullPolicy: IfNotPresent
        name: kafka1-deploy
        ports:
        - containerPort: 29092
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka2-deploy
  name: kafka2
spec:
  ports:
  - port: 29093
  selector:
    app: kafka2-deploy
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kafka2-deploy
  name: kafka2-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka2-deploy
  template:
    metadata:
      labels:
        app: kafka2-deploy
    spec:
      hostname: kafka2-deploy
      containers:
      - env:
        - name: KAFKA_BROKER_ID
          value: "2"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: zookeeper-service:2181
        - name: KAFKA_LISTENERS
          value: INTERNAL://:29093
        - name: KAFKA_ADVERTISED_LISTENERS
          value: INTERNAL://kafka2:29093
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: INTERNAL:PLAINTEXT
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: INTERNAL
        image: wurstmeister/kafka
        imagePullPolicy: IfNotPresent
        name: kafka2-deploy
        ports:
        - containerPort: 29093
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka3-deploy
  name: kafka3
spec:
  ports:
  - port: 29094
  selector:
    app: kafka3-deploy
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kafka3-deploy
  name: kafka3-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka3-deploy
  template:
    metadata:
      labels:
        app: kafka3-deploy
    spec:
      hostname: kafka3-deploy
      containers:
      - env:
        - name: KAFKA_BROKER_ID
          value: "3"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: zookeeper-service:2181
        - name: KAFKA_LISTENERS
          value: INTERNAL://:29094
        - name: KAFKA_ADVERTISED_LISTENERS
          value: INTERNAL://kafka3:29094
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: INTERNAL:PLAINTEXT
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: INTERNAL
        image: wurstmeister/kafka
        imagePullPolicy: IfNotPresent
        name: kafka3-deploy
        ports:
        - containerPort: 29094
---